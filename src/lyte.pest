
WHITESPACE = _{ " " | "\n" }

alpha = @{ 'a'..'z' | 'A'..'Z' | "_" }
digit = @{ '0'..'9' }

id = @{ alpha ~ (alpha | digit)* }

typevar = { "⟨" ~ id ~ "⟩" }
array_type = { "[" ~ ty ~ "]" }
int8 = { "i8" }
uint8 = { "u8" }
int32 = { "i32" }
uint32 = { "u32" }
float32 = { "f32" }
float64 = { "f64" }
ty = { int8 | uint8 | int32 | uint32 | float32 | float64 | id | typevar | array_type }

cond = { "if" }

atom = { id
       | "(" ~ expr ~ ")"
       | block         // lambda without arguments
       | "(" ~ expr ~ ")" ~ block   // lambda (args must be a list)
       | cond ~ expr ~ block ~ "else" ~ block
       }

lbracket = { "[" }
rbracket = { "]" }
dot = { "." }
colon = { ":" }
lparen = { "(" }
rparen = { ")" }

prefix = { atom ~ ( lparen ~ expr ~ rparen
                  | lbracket ~ expr ~ rbracket
                  | dot ~ id
                  | colon ~ ty )* }

times = { "*" }
div = { "/" }

factor = { prefix ~ (times ~ factor | div ~ factor)* }

plus = { "+" }
minus = { "-" }

term = { factor ~ (plus ~ term | minus ~ term)* }
       
expr = _{ term }
     
block  = { "{" ~ expr* ~ "}" }

structdef = { "struct "}
enumdef = { "enum" }

arrow = { "->" }

exprlist = { (expr ~ ",")* ~ expr }

fndecl = { id ~ "(" ~ ")" ~ block
         | id ~ "(" ~ exprlist ~ ")" ~ block
         | id ~ "(" ~ exprlist ~ ")" ~ arrow ~ ty ~ block
         }

decl = { fndecl
       | structdef ~ id ~ "{" ~ (id ~ ":" ~ ty)* ~ "}"   // struct
       | enumdef ~ id ~ "{" ~ id* ~ "}"                  // enums
       }
     
program = { SOI ~ decl* ~ EOI }