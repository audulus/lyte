
WHITESPACE = _{ " " | "\n" }

alpha = @{ 'a'..'z' | 'A'..'Z' | "_" }
digit = @{ '0'..'9' }

ident = @{ alpha ~ (alpha | digit)* }

typevar = { "⟨" ~ ident ~ "⟩" }
array_type = { "[" ~ ty ~ "]" }
int8 = { "i8" }
uint8 = { "u8" }
int32 = { "i32" }
uint32 = { "u32" }
float32 = { "f32" }
float64 = { "f64" }
ty = { int8 | uint8 | int32 | uint32 | float32 | float64 | ident | typevar | array_type }

atom = { ident
       | "(" ~ expr ~ ")"
       | block         // lambda without arguments
       | "(" ~ expr ~ ")" ~ block   // lambda (args must be a list)
       | "if" ~ expr ~ block ~ "else" ~ block
       }

index = { "[" ~ expr ~ "]" }
field = { "." ~ ident }
call = { "(" ~ expr ~ ")" }
as_ty = { ":" ~ ty }

suffix = { call | index | field | as_ty }

prefix = { atom ~ (suffix)* }

factor = { prefix ~ ("*" ~ factor)* }

term = { factor ~ ("+" ~ term)* }
       
expr = { term }
     
block  = { "{" ~ expr* ~ "}" }

decl = { ident ~ "(" ~ expr ~ ")" ~ block                      // function
       | ident ~ "(" ~ expr ~ ")" ~ "->" ~ ty ~ block          // function with return type
       | "struct" ~ ident ~ "{" ~ (ident ~ ":" ~ ty)* ~ "}"    // struct
       | "enum" ~ ident ~ "{" ~ ident* ~ "}"                   // enums
       }
     
program = { decl* }