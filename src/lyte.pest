
WHITESPACE = _{ " " | "\n" }

alpha = @{ 'a'..'z' | 'A'..'Z' | "_" }
digit = @{ '0'..'9' }

id = @{ alpha ~ (alpha | digit)* }

typevar = { "⟨" ~ id ~ "⟩" }
array_type = { "[" ~ ty ~ "]" }
int8 = { "i8" }
uint8 = { "u8" }
int32 = { "i32" }
uint32 = { "u32" }
float32 = { "f32" }
float64 = { "f64" }
ty = { int8 | uint8 | int32 | uint32 | float32 | float64 | id | typevar | array_type }

atom = { id
       | "(" ~ expr ~ ")"
       | block         // lambda without arguments
       | "(" ~ expr ~ ")" ~ block   // lambda (args must be a list)
       | "if" ~ expr ~ block ~ "else" ~ block
       }

lbracket = { "[" }
rbracket = { "]" }
dot = { "." }
colon = { ":" }
lparen = { "(" }
rparen = { ")" }

prefix = { atom ~ ( lparen ~ expr ~ rparen | lbracket ~ expr ~ rbracket | dot ~ id | colon ~ ty )* }

factor = { prefix ~ ("*" ~ factor)* }

term = { factor ~ ("+" ~ term)* }
       
expr = { term }
     
block  = { "{" ~ expr* ~ "}" }

decl = { id ~ "(" ~ ")" ~ block                          // function with no arguments
       | id ~ "(" ~ expr ~ ")" ~ block                   // function
       | id ~ "(" ~ expr ~ ")" ~ "->" ~ ty ~ block       // function with return type
       | "struct" ~ id ~ "{" ~ (id ~ ":" ~ ty)* ~ "}"    // struct
       | "enum" ~ id ~ "{" ~ id* ~ "}"                   // enums
       }
     
program = { SOI ~ decl* ~ EOI }